@use "../core/module";

/// Generates landscape element styles with configurable gaps and scroll snapping
/// @param {List} $gaps [()] - List of registered gap names to include. Pass null to include all registered gaps
///
/// @termeh {Color} [error] - color("primary") -> accent color for scrollbar
/// @termeh {Number} [8px] - var("gap", "micro") -> default spacing between landscape items
@mixin use-landscape($gaps: ()) {
    @if not module.module-presented("landscape") {
        @include module.present-module("landscape");

        $primary: module.color("primary");
        $gap-micro: module.var("gap", "micro", 8px);

        @at-root {
            .landscape {
                display: flex;
                flex-flow: row nowrap;
                box-sizing: border-box;
                overflow: hidden;
                overflow-x: auto;
                scroll-snap-type: x proximity;
                @include module.overflow-touch();
                @include module.scrollable($primary);

                > * {
                    flex-shrink: 0;
                    scroll-snap-align: start;
                }

                &.is-center-snapped > * {
                    scroll-snap-align: center;
                }

                &.is-end-snapped > * {
                    scroll-snap-align: end;
                }

                &.is-mandatory {
                    scroll-snap-type: x mandatory;
                }

                &.is-stacked {
                    flex-direction: column;
                    overflow: hidden auto;
                    scroll-snap-type: y proximity;

                    &.is-mandatory {
                        scroll-snap-type: y mandatory;
                    }
                }

                @each $name, $align in module.flex-aligns() {
                    &.is-#{$name}-align {
                        align-items: $align;
                    }
                }

                @each $name, $justify in module.flex-justifies() {
                    &.is-#{$name}-justify {
                        justify-content: $justify;
                    }
                }

                &:not(.is-gapless) {
                    margin: module.negate(module.half($gap-micro));

                    > * {
                        margin: module.half($gap-micro);
                    }

                    @each $name, $gap in module.gaps($includes: $gaps) {
                        &.is-#{$name}-gap {
                            margin: module.negate(module.half($gap));

                            > * {
                                margin: module.half($gap);
                            }
                        }
                    }
                }

                @each $device, $query in module.media-queries() {
                    @media #{$query} {
                        @each $name, $align in module.flex-aligns() {
                            &.is-#{$device}-#{$name}-align {
                                align-items: $align;
                            }
                        }

                        @each $name, $justify in module.flex-justifies() {
                            &.is-#{$device}-#{$name}-justify {
                                justify-content: $justify;
                            }
                        }

                        &.is-#{$device}-stacked {
                            flex-direction: column;
                            overflow: hidden auto;
                            scroll-snap-type: y proximity;
                            align-items: stretch;

                            &.is-mandatory {
                                scroll-snap-type: y mandatory;
                            }
                        }
                    }
                }
            }
        }
    }
}
