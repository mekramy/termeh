@use "../core/module";

/// Generates container element styles with configurable paddings
/// @param {List} $paddings [()] - List of registered gap names to include for padding
///
/// @termeh {Number} [1.6em] - var("gap", "macro") -> default container padding and bottom margin
/// @termeh {Number} [960px] - var("container", "desktop") -> max-width for desktop and smaller screens
/// @termeh {Number} [1200px] - var("container", "widescreen") -> max-width for widescreen devices
/// @termeh {Number} [1500px] - var("container", "fullhd") -> max-width for full-HD and larger screens
@mixin use-container($paddings: ()) {
    @if not module.module-presented("container") {
        @include module.present-module("container");

        $gap-macro: module.var("gap", "macro", 1.6em);
        $desktop: module.var("container", "desktop", 960px);
        $widescreen: module.var("container", "widescreen", 1200px);
        $fullhd: module.var("container", "fullhd", 1500px);

        @at-root {
            .container {
                max-width: 100%;
                display: block;
                position: relative;
                box-sizing: border-box;

                @include module.marged() {
                    margin-bottom: $gap-macro;
                }

                &:not(.is-fullwidth) {
                    @include module.desktop() {
                        margin-left: auto;
                        margin-right: auto;
                        max-width: $desktop;
                    }

                    @include module.widescreen() {
                        margin-left: auto;
                        margin-right: auto;
                        max-width: $widescreen;
                    }

                    @include module.fullhd() {
                        margin-left: auto;
                        margin-right: auto;
                        max-width: $fullhd;
                    }
                }

                @include module.padded() {
                    padding: $gap-macro;

                    @each $name, $gap in module.gaps($includes: $paddings) {
                        &.is-#{$name}-padded {
                            padding: $gap;
                        }
                    }
                }
            }
        }
    }
}
